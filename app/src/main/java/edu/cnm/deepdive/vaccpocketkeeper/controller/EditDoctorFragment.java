package edu.cnm.deepdive.vaccpocketkeeper.controller;

import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.lifecycle.ViewModelProvider;
import com.google.android.material.bottomsheet.BottomSheetDialogFragment;
import edu.cnm.deepdive.vaccpocketkeeper.databinding.FragmentEditDoctorBinding;
import edu.cnm.deepdive.vaccpocketkeeper.model.entity.Doctor;
import edu.cnm.deepdive.vaccpocketkeeper.viewmodel.DoctorViewModel;
import edu.cnm.deepdive.vaccpocketkeeper.viewmodel.VaccineViewModel;

/**
 * Implements the capability to create or edit a {@link Doctor} object from the user interface.  Interacts with
 * the {@link DoctorViewModel} to create or update the {@link Doctor} information to the database.
 */
public class EditDoctorFragment extends BottomSheetDialogFragment implements TextWatcher {

  private FragmentEditDoctorBinding binding;
  private DoctorViewModel viewModel;
  private long doctorId;
  private Doctor doctor;

  /**
   * Overrides the onCreate method in Fragment.  Gets the doctorId to display the
   * Doctor associated with that particular id.
   * @param savedInstanceState
   */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    EditDoctorFragmentArgs args = EditDoctorFragmentArgs.fromBundle(getArguments()); //generated for us by navigation framework
    doctorId = args.getDoctorId(); //autogenerated getDoctorId from navgraph argument name
  }

  /**
   * Overrides the onConCreateViewreate method in Fragment. Inflates (sets up and displays) the layout as
   * specified in fragment_edit_doctor.xml.  Sets up a TextChangedListener on all fields, and an
   * OnClickListener on the save and delete button.
   * @param inflater a {@link LayoutInflater}.
   * @param container a {@link ViewGroup}.
   * @param savedInstanceState a {@link Bundle}.
   * @return a {@link View}.
   */
  @Override
  public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
      Bundle savedInstanceState) {
    binding = FragmentEditDoctorBinding.inflate(inflater, container, false);
    binding.doctorName.addTextChangedListener(this);
    binding.cancel.setOnClickListener((v) -> dismiss());
    binding.save.setOnClickListener((v) -> {
      doctor.setName(binding.doctorName.getText().toString().trim());
      viewModel.save(doctor);
      dismiss();
    });
    return binding.getRoot();
  }

  /**
   * Overrides the onViewCreated method in Fragment.  Specifically, interacts with the
   * {@link DoctorViewModel} to create or edit a {@link Doctor} from the database.
   * @param view a {@link View}.
   * @param savedInstanceState a {@link Bundle}.
   */
  @Override
  public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
    super.onViewCreated(view, savedInstanceState);
    viewModel = new ViewModelProvider(this).get(DoctorViewModel.class);
    if (doctorId != 0) { //previous doctor
      viewModel.setDoctorId(doctorId);
      viewModel.getDoctor().observe(getViewLifecycleOwner(),(doctor) -> {
        this.doctor = doctor;
        binding.doctorName.setText(doctor.getName());
      });
    } else { //new doctor
      doctor = new Doctor();
    }
  }

  @Override
  public void onDestroyView() {
    super.onDestroyView();
    binding = null;
  }

  @Override
  public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
    //Do nothing.
  }

  @Override
  public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
    //Do nothing.
  }

  @Override
  public void afterTextChanged(Editable editable) {
    checkSubmitConditions();
  }

  private void checkSubmitConditions() {
    String doctor = binding.doctorName.getText().toString().trim();
    binding.save.setEnabled(!doctor.isEmpty());
  }
}
