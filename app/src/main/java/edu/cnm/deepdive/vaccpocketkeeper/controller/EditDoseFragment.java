package edu.cnm.deepdive.vaccpocketkeeper.controller;

import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.lifecycle.ViewModelProvider;
import com.google.android.material.bottomsheet.BottomSheetDialogFragment;
import edu.cnm.deepdive.vaccpocketkeeper.databinding.FragmentEditDoseBinding;
import edu.cnm.deepdive.vaccpocketkeeper.model.entity.Dose;
import edu.cnm.deepdive.vaccpocketkeeper.viewmodel.DoseViewModel;

public class EditDoseFragment extends BottomSheetDialogFragment implements TextWatcher {
  
  //TODO: Fix entire file
  
  private FragmentEditDoseBinding binding;
  private DoseViewModel viewModel;
  private long doseId;
  private Dose dose;

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    EditDoseFragmentArgs args = EditDoseFragmentArgs.fromBundle(getArguments()); //generated for us by navigation framework
    doseId = args.getDoseId(); //autogenerated getDoseId from navgraph argument name
  }

  @Override
  public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
      Bundle savedInstanceState) {
    binding = FragmentEditDoseBinding.inflate(inflater, container, false);
    binding.doseName.addTextChangedListener(this);
    binding.cancel.setOnClickListener((v) -> dismiss());
    binding.save.setOnClickListener((v) -> {
      dose.setName(binding.doseName.getText().toString().trim());
      viewModel.save(dose);
      dismiss();
    });
    return binding.getRoot();
  }

  @Override
  public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
    super.onViewCreated(view, savedInstanceState);
    viewModel = new ViewModelProvider(this).get(DoseViewModel.class);
    if (doseId != 0) { //previous dose
      viewModel.setDoseId(doseId);
      viewModel.getDose().observe(getViewLifecycleOwner(),(dose) -> {
        this.dose = dose;
        binding.doseName.setText(dose.getName());
      });
    } else { //new dose
      dose = new Dose();
    }
  }

  @Override
  public void onDestroyView() {
    super.onDestroyView();
    binding = null;
  }

  @Override
  public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
    //Do nothing.
  }

  @Override
  public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
    //Do nothing.
  }

  @Override
  public void afterTextChanged(Editable editable) {
    checkSubmitConditions();
  }

  private void checkSubmitConditions() {
    String dose = binding.doseName.getText().toString().trim();
    binding.save.setEnabled(!dose.isEmpty());
  }
}
